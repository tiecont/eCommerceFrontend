{
  "version": 3,
  "sources": ["../../react-truncate/lib/Truncate.js"],
  "sourcesContent": ["var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nvar Truncate = function (_Component) {\n    _inherits(Truncate, _Component);\n\n    function Truncate() {\n        var _ref;\n\n        _classCallCheck(this, Truncate);\n\n        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n        }\n\n        var _this = _possibleConstructorReturn(this, (_ref = Truncate.__proto__ || Object.getPrototypeOf(Truncate)).call.apply(_ref, [this].concat(args)));\n\n        _this.state = {};\n        _this.styles = {\n            ellipsis: {\n                position: 'fixed',\n                visibility: 'hidden',\n                top: 0,\n                left: 0\n            }\n        };\n\n\n        _this.elements = {};\n\n        _this.onResize = _this.onResize.bind(_this);\n        _this.onTruncate = _this.onTruncate.bind(_this);\n        _this.calcTargetWidth = _this.calcTargetWidth.bind(_this);\n        _this.measureWidth = _this.measureWidth.bind(_this);\n        _this.getLines = _this.getLines.bind(_this);\n        _this.renderLine = _this.renderLine.bind(_this);\n        return _this;\n    }\n\n    _createClass(Truncate, [{\n        key: 'componentDidMount',\n        value: function componentDidMount() {\n            var text = this.elements.text,\n                calcTargetWidth = this.calcTargetWidth,\n                onResize = this.onResize;\n\n\n            var canvas = document.createElement('canvas');\n            this.canvasContext = canvas.getContext('2d');\n\n            calcTargetWidth(function () {\n                // Node not needed in document tree to read its content\n                if (text) {\n                    text.parentNode.removeChild(text);\n                }\n            });\n\n            window.addEventListener('resize', onResize);\n        }\n    }, {\n        key: 'componentDidUpdate',\n        value: function componentDidUpdate(prevProps) {\n            // Render was based on outdated refs and needs to be rerun\n            if (this.props.children !== prevProps.children) {\n                this.forceUpdate();\n            }\n\n            // If the width prop has changed, recalculate size of contents\n            if (this.props.width !== prevProps.width) {\n                this.calcTargetWidth();\n            }\n        }\n    }, {\n        key: 'componentWillUnmount',\n        value: function componentWillUnmount() {\n            var ellipsis = this.elements.ellipsis,\n                onResize = this.onResize,\n                timeout = this.timeout;\n\n\n            ellipsis.parentNode.removeChild(ellipsis);\n\n            window.removeEventListener('resize', onResize);\n\n            window.cancelAnimationFrame(timeout);\n        }\n\n        // Shim innerText to consistently break lines at <br/> but not at \\n\n\n    }, {\n        key: 'innerText',\n        value: function innerText(node) {\n            var div = document.createElement('div');\n            var contentKey = 'innerText' in window.HTMLElement.prototype ? 'innerText' : 'textContent';\n\n            div.innerHTML = node.innerHTML.replace(/\\r\\n|\\r|\\n/g, ' ');\n\n            var text = div[contentKey];\n\n            var test = document.createElement('div');\n            test.innerHTML = 'foo<br/>bar';\n\n            if (test[contentKey].replace(/\\r\\n|\\r/g, '\\n') !== 'foo\\nbar') {\n                div.innerHTML = div.innerHTML.replace(/<br.*?[\\/]?>/gi, '\\n');\n                text = div[contentKey];\n            }\n\n            return text;\n        }\n    }, {\n        key: 'onResize',\n        value: function onResize() {\n            this.calcTargetWidth();\n        }\n    }, {\n        key: 'onTruncate',\n        value: function onTruncate(didTruncate) {\n            var onTruncate = this.props.onTruncate;\n\n\n            if (typeof onTruncate === 'function') {\n                this.timeout = window.requestAnimationFrame(function () {\n                    onTruncate(didTruncate);\n                });\n            }\n        }\n    }, {\n        key: 'calcTargetWidth',\n        value: function calcTargetWidth(callback) {\n            var target = this.elements.target,\n                calcTargetWidth = this.calcTargetWidth,\n                canvasContext = this.canvasContext,\n                width = this.props.width;\n\n            // Calculation is no longer relevant, since node has been removed\n\n            if (!target) {\n                return;\n            }\n\n            var targetWidth = width ||\n            // Floor the result to deal with browser subpixel precision\n            Math.floor(target.parentNode.getBoundingClientRect().width);\n\n            // Delay calculation until parent node is inserted to the document\n            // Mounting order in React is ChildComponent, ParentComponent\n            if (!targetWidth) {\n                return window.requestAnimationFrame(function () {\n                    return calcTargetWidth(callback);\n                });\n            }\n\n            var style = window.getComputedStyle(target);\n\n            var font = [style['font-weight'], style['font-style'], style['font-size'], style['font-family']].join(' ');\n\n            canvasContext.font = font;\n\n            this.setState({\n                targetWidth: targetWidth\n            }, callback);\n        }\n    }, {\n        key: 'measureWidth',\n        value: function measureWidth(text) {\n            return this.canvasContext.measureText(text).width;\n        }\n    }, {\n        key: 'ellipsisWidth',\n        value: function ellipsisWidth(node) {\n            return node.offsetWidth;\n        }\n    }, {\n        key: 'trimRight',\n        value: function trimRight(text) {\n            return text.replace(/\\s+$/, '');\n        }\n    }, {\n        key: 'getLines',\n        value: function getLines() {\n            var elements = this.elements,\n                _props = this.props,\n                numLines = _props.lines,\n                ellipsis = _props.ellipsis,\n                trimWhitespace = _props.trimWhitespace,\n                targetWidth = this.state.targetWidth,\n                innerText = this.innerText,\n                measureWidth = this.measureWidth,\n                onTruncate = this.onTruncate,\n                trimRight = this.trimRight;\n\n\n            var lines = [];\n            var text = innerText(elements.text);\n            var textLines = text.split('\\n').map(function (line) {\n                return line.split(' ');\n            });\n            var didTruncate = true;\n            var ellipsisWidth = this.ellipsisWidth(this.elements.ellipsis);\n\n            for (var line = 1; line <= numLines; line++) {\n                var textWords = textLines[0];\n\n                // Handle newline\n                if (textWords.length === 0) {\n                    lines.push();\n                    textLines.shift();\n                    line--;\n                    continue;\n                }\n\n                var resultLine = textWords.join(' ');\n\n                if (measureWidth(resultLine) <= targetWidth) {\n                    if (textLines.length === 1) {\n                        // Line is end of text and fits without truncating\n                        didTruncate = false;\n\n                        lines.push(resultLine);\n                        break;\n                    }\n                }\n\n                if (line === numLines) {\n                    // Binary search determining the longest possible line inluding truncate string\n                    var textRest = textWords.join(' ');\n\n                    var lower = 0;\n                    var upper = textRest.length - 1;\n\n                    while (lower <= upper) {\n                        var middle = Math.floor((lower + upper) / 2);\n\n                        var testLine = textRest.slice(0, middle + 1);\n\n                        if (measureWidth(testLine) + ellipsisWidth <= targetWidth) {\n                            lower = middle + 1;\n                        } else {\n                            upper = middle - 1;\n                        }\n                    }\n\n                    var lastLineText = textRest.slice(0, lower);\n\n                    if (trimWhitespace) {\n                        lastLineText = trimRight(lastLineText);\n\n                        // Remove blank lines from the end of text\n                        while (!lastLineText.length && lines.length) {\n                            var prevLine = lines.pop();\n\n                            lastLineText = trimRight(prevLine);\n                        }\n                    }\n\n                    resultLine = React.createElement(\n                        'span',\n                        null,\n                        lastLineText,\n                        ellipsis\n                    );\n                } else {\n                    // Binary search determining when the line breaks\n                    var _lower = 0;\n                    var _upper = textWords.length - 1;\n\n                    while (_lower <= _upper) {\n                        var _middle = Math.floor((_lower + _upper) / 2);\n\n                        var _testLine = textWords.slice(0, _middle + 1).join(' ');\n\n                        if (measureWidth(_testLine) <= targetWidth) {\n                            _lower = _middle + 1;\n                        } else {\n                            _upper = _middle - 1;\n                        }\n                    }\n\n                    // The first word of this line is too long to fit it\n                    if (_lower === 0) {\n                        // Jump to processing of last line\n                        line = numLines - 1;\n                        continue;\n                    }\n\n                    resultLine = textWords.slice(0, _lower).join(' ');\n                    textLines[0].splice(0, _lower);\n                }\n\n                lines.push(resultLine);\n            }\n\n            onTruncate(didTruncate);\n\n            return lines;\n        }\n    }, {\n        key: 'renderLine',\n        value: function renderLine(line, i, arr) {\n            if (i === arr.length - 1) {\n                return React.createElement(\n                    'span',\n                    { key: i },\n                    line\n                );\n            } else {\n                var br = React.createElement('br', { key: i + 'br' });\n\n                if (line) {\n                    return [React.createElement(\n                        'span',\n                        { key: i },\n                        line\n                    ), br];\n                } else {\n                    return br;\n                }\n            }\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var _this2 = this;\n\n            var target = this.elements.target,\n                _props2 = this.props,\n                children = _props2.children,\n                ellipsis = _props2.ellipsis,\n                lines = _props2.lines,\n                spanProps = _objectWithoutProperties(_props2, ['children', 'ellipsis', 'lines']),\n                targetWidth = this.state.targetWidth,\n                getLines = this.getLines,\n                renderLine = this.renderLine,\n                onTruncate = this.onTruncate;\n\n            var text = void 0;\n\n            var mounted = !!(target && targetWidth);\n\n            if (typeof window !== 'undefined' && mounted) {\n                if (lines > 0) {\n                    text = getLines().map(renderLine);\n                } else {\n                    text = children;\n\n                    onTruncate(false);\n                }\n            }\n\n            delete spanProps.onTruncate;\n            delete spanProps.trimWhitespace;\n\n            return React.createElement(\n                'span',\n                _extends({}, spanProps, { ref: function ref(targetEl) {\n                        _this2.elements.target = targetEl;\n                    } }),\n                React.createElement(\n                    'span',\n                    null,\n                    text\n                ),\n                React.createElement(\n                    'span',\n                    { ref: function ref(textEl) {\n                            _this2.elements.text = textEl;\n                        } },\n                    children\n                ),\n                React.createElement(\n                    'span',\n                    { ref: function ref(ellipsisEl) {\n                            _this2.elements.ellipsis = ellipsisEl;\n                        }, style: this.styles.ellipsis },\n                    ellipsis\n                )\n            );\n        }\n    }]);\n\n    return Truncate;\n}(Component);\n\nTruncate.propTypes = {\n    children: PropTypes.node,\n    ellipsis: PropTypes.node,\n    lines: PropTypes.oneOfType([PropTypes.oneOf([false]), PropTypes.number]),\n    trimWhitespace: PropTypes.bool,\n    width: PropTypes.number,\n    onTruncate: PropTypes.func\n};\nTruncate.defaultProps = {\n    children: '',\n    ellipsis: '…',\n    lines: 1,\n    trimWhitespace: false,\n    width: 0\n};\nexport default Truncate;\n;\n"],
  "mappings": "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",
  "names": ["Truncate", "onTruncate", "calcTargetWidth", "line", "React", "PropTypes"]
}
